package doxa.version2.compiler.syntax;

import java_cup.runtime.*;
import java.util.*;
import doxa.version2.compiler.tree.*;
import doxa.version2.compiler.tree.expression.*;
import doxa.version2.compiler.tree.command.*;

/*****  Terminais (tokens) *****/

terminal String IDENTIFICADOR;
    
terminal String  IGUAL_QUE, DIFERENTE_QUE; 
terminal String  MAIOR_QUE, MENOR_QUE, MAIOR_OU_IGUAL, MENOR_OU_IGUAL;
terminal String  SOMA, SUB, MULT, DIV, RESTO;
terminal String  AND, OR, NOT;
    
terminal String  ATRIBUICAO, VIRGULA, PONTO_VIRGULA;
terminal String  ABRE_PAR, FECHA_PAR, ABRE_CHAVE, FECHA_CHAVE;
    
terminal String  INT_LITERAL;
terminal String  FLOAT_LITERAL;
terminal String  CHAR_LITERAL;
    
terminal String  KEY_IF, KEY_ELSE;
terminal String  KEY_WHILE, KEY_RETURN;
terminal String  KEY_INT, KEY_FLOAT, KEY_CHAR, KEY_PRINT;
terminal String  KEY_VAR, KEY_PROC;


/***** Nao-terminais *****/

non terminal Programa					programa;
non terminal DeclGlobal					decl_global;
non terminal DeclVariavel				decl_variavel;
non terminal LinkedList<String>			lista_idents;
non terminal LinkedList<String>			resto_lista_idents;
non terminal Tipo						tipo;
non terminal LinkedList<DeclFuncao>		decl_funcao;
non terminal NomeComArgumentos			nome_args;
non terminal LinkedList<DeclVariavel> 	param_formais;
non terminal LinkedList<DeclVariavel> 	resto_param_formais;
non terminal Bloco						bloco;
non terminal 							lista_comandos;
non terminal Comando					comando;
non terminal Atribuicao		        	atribuicao;
non terminal Iteracao					iteracao;
non terminal Decisao					decisao;
non terminal Escrita					escrita;
non terminal Comando					chamada_func_cmd;
non terminal Retorno					retorno;
non terminal ChamadaFunc				chamada_func;
non terminal LinkedList<Expressao>		lista_exprs;
non terminal LinkedList<Expressao>		resto_lista_exprs;
non terminal Expressao 					expressao;
non terminal Expressao 					expr_basica;


/***** Precedencia e associatividade *****/

precedence left OR, AND; //simbolos de menor precedencia
precedence left IGUAL_QUE, DIFERENTE_QUE, MAIOR_QUE, MENOR_QUE, MAIOR_OU_IGUAL, MENOR_OU_IGUAL;
precedence left SOMA, SUB;     
precedence left MULT, DIV, RESTO;   
precedence left NOT;     //simbolo de maior precedencia


/***** A gramatica *****/

programa ::= programa:p decl_global:d
			  {: p.addLast(d); RESULT = p ;  :}
			 
		   | /*vazio*/
		      {: RESULT = new Programa();  :}
           ;


decl_global ::= decl_variavel:d
				 {:  RESULT = d; :}
              | decl_funcao
			     {:       :}
              ;
            
            
decl_variavel ::= KEY_VAR lista_idents:li SUB tipo:t PONTO_VIRGULA
 				{: RESULT = new DeclVariavel(li, t); :}
                ;


lista_idents ::= IDENTIFICADOR:str resto_lista_idents:list
 				{: list.addFirst(str); RESULT = list; :}
               ;


resto_lista_idents ::=  VIRGULA IDENTIFICADOR:str resto_lista_idents:list
					 {: list.addFirst(str); RESULT = list; :}
                     |  /* vazio */
                     {: RESULT = new LinkedList<String>(); :}
                     ;

tipo ::= KEY_INT
			 
	   | KEY_CHAR 
		
	   | KEY_FLOAT 
		
	   ;
		
decl_funcao ::= KEY_PROC nome_args SUB tipo bloco

              | KEY_PROC nome_args bloco

		      ;
		
nome_args ::= IDENTIFICADOR ABRE_PAR param_formais FECHA_PAR
				
            | nome_args IDENTIFICADOR ABRE_PAR param_formais FECHA_PAR   /* recursao a esquerda, para gerar repeticoes/lista sequencial */

            ;
             

param_formais ::= IDENTIFICADOR SUB tipo resto_param_formais

                | /*vazio*/

                ;	
                	
		
resto_param_formais ::= VIRGULA IDENTIFICADOR SUB tipo resto_param_formais
						
                      | /*vazio*/

                      ; 
                      		
		
bloco ::= ABRE_CHAVE lista_comandos FECHA_CHAVE 

		;		
			
		
lista_comandos ::= lista_comandos comando

				 | /*vazio*/
 
                 ;		
                 
		
comando  ::= decl_variavel

           | atribuicao

           | iteracao
      
           | decisao 

           | escrita

           | retorno

           | bloco

           | chamada_func_cmd

           ;
           
           
atribuicao ::= IDENTIFICADOR:i ATRIBUICAO expressao:e PONTO_VIRGULA 
                {: RESULT = new Atribuicao(i, e); 	:}
			 ;    
				       
           
iteracao ::= KEY_WHILE ABRE_PAR expressao:e FECHA_PAR comando:c 
				{: RESULT = new Iteracao(e,c); 	:}
  		   ; 
           
           
decisao ::= KEY_IF ABRE_PAR expressao FECHA_PAR comando KEY_ELSE comando

          | KEY_IF ABRE_PAR expressao FECHA_PAR comando

          ;
   

escrita ::= KEY_PRINT ABRE_PAR lista_exprs:e FECHA_PAR PONTO_VIRGULA 
			{: RESULT = new Escrita(e); 	:}
		  ;           


chamada_func_cmd ::= chamada_func:c PONTO_VIRGULA 
					{:	RESULT = c; :}
				   ;

					
retorno ::= KEY_RETURN expressao:e PONTO_VIRGULA 
			{: RESULT = new Retorno(e); 	:}
		  ;

			
chamada_func ::= IDENTIFICADOR:i ABRE_PAR lista_exprs:l FECHA_PAR
				{: 	RESULT = new ChamadaFunc(i, l);	:} 

               | chamada_func:c IDENTIFICADOR ABRE_PAR lista_exprs FECHA_PAR  /* recursao a esquerda, para gerar repeticoes/lista sequencial */
				{: 	RESULT = c;	:}
			   ;

			
lista_exprs ::= expressao:e resto_lista_exprs:rl	
				{: rl.addFirst(e); RESULT = rl; :}
              | /*vazio*/
              	{: RESULT = new LinkedList<Expressao>(); :} /* Caso onde nao possui parametros na chamada da funcao, a lista é vazia */
              ; 
			
			
resto_lista_exprs ::= resto_lista_exprs:rl VIRGULA expressao:e
						{: rl.addLast(e); RESULT = rl; :}
                    | /*vazio*/
						{: RESULT = new LinkedList<Expressao>(); :}
                    ;
			
			
expressao ::= expressao:e1 SOMA expressao:e2
				{: 	RESULT = new ExprAritmetica(e1, e2, "+");	:}
        
            | expressao:e1 SUB expressao:e2
            	{: 	RESULT = new ExprAritmetica(e1, e2, "-");	:}
        
            | expressao:e1 MULT expressao:e2
            	{: 	RESULT = new ExprAritmetica(e1, e2, "*");	:}
        
            | expressao:e1 DIV expressao:e2
            	{: 	RESULT = new ExprAritmetica(e1, e2, "/");	:}
        
            | expressao:e1 RESTO expressao:e2
            	{: 	RESULT = new ExprAritmetica(e1, e2, "%");	:}
        
            | expressao:e1 AND expressao:e2
            	{: 	RESULT = new ExprLogica(e1, e2, "&&");	:}
        
        	| expressao:e1 OR expressao:e2
        		{: 	RESULT = new ExprLogica(e1, e2, "||");	:}
        
        	| expressao:e1 IGUAL_QUE expressao:e2
        		{: 	RESULT = new ExprRelacional(e1, e2, "="); :}
        
        	| expressao:e1 DIFERENTE_QUE expressao:e2
        		{: 	RESULT = new ExprRelacional(e1, e2, "<>"); :}
        
        	| expressao:e1 MENOR_QUE expressao:e2
        		{: 	RESULT = new ExprRelacional(e1, e2, "<"); :}
        
        	| expressao:e1 MENOR_OU_IGUAL expressao:e2
        		{: 	RESULT = new ExprRelacional(e1, e2, "<="); :}
        
        	| expressao:e1 MAIOR_OU_IGUAL expressao:e2
        		{: 	RESULT = new ExprRelacional(e1, e2, ">="); :}
        
        	| expressao:e1 MAIOR_QUE expressao:e2
        		{: 	RESULT = new ExprRelacional(e1, e2, ">"); :}
        
        	| expr_basica:e
				{:	RESULT = e;	:}
        	;


expr_basica ::= ABRE_PAR expressao:e FECHA_PAR 
             	{: RESULT = e;	:}
             
   		      | NOT:n expr_basica:e
   		      	{: RESULT = new ExpUnaria(n, e);	:}
   		      	
         	  | SUB:s expr_basica:e
         		{: RESULT = new ExpUnaria(s, e);	:}
         		
        	  | INT_LITERAL:i
                {:  int valor = Integer.parseInt(i); 
                    RESULT = new IntLiteral(valor);    :}
                    
         	  | CHAR_LITERAL:c
         		{:  RESULT = new CharLiteral(c);    :}
         		
         	  | FLOAT_LITERAL:f
         		{:  float valor = Float.parseFloat(f); 
                    RESULT = new FloatLiteral(valor);    :}
                    
         	  | IDENTIFICADOR:id
         	  	{: RESULT = new ExprIdentificador(id);	:}
         
         	  | chamada_func:c
         		{: RESULT = c;	:}
         	  ;
